{"version":3,"sources":["assets/twitter-logo.svg","App.js","index.js"],"names":["SystemProgram","web3","arr","Keypair","Object","values","kp","_keypair","secretKey","secret","Uint8Array","baseAccount","fromSecretKey","programID","PublicKey","idl","metadata","address","network","clusterApiUrl","opts","TWITTER_HANDLE","TWITTER_LINK","TEST_GIFS","App","useState","walletAddress","setWalletAddress","inputValue","setInputValue","gifList","setGifList","connectWallet","a","window","solana","connect","response","console","log","publicKey","toString","onInputChange","event","value","target","sendGif","length","provider","getProvider","program","Program","rpc","addGif","accounts","getGifList","connection","Connection","Provider","createGifAccount","startStuffOff","user","wallet","systemProgram","programId","signers","account","fetch","useEffect","checkIfWalletIsConnected","isPhantom","onlyIfTrusted","alert","error","addEventListener","className","onClick","type","placeholder","onChange","map","item","index","src","gifLink","alt","twitterLogo","href","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.901dbbb6.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.4844b78f.svg\";","import twitterLogo from \"./assets/twitter-logo.svg\";\r\nimport \"./App.css\";\r\nimport idl from \"./idl.json\";\r\nimport kp from \"./keypair.json\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Connection, PublicKey, clusterApiUrl } from \"@solana/web3.js\";\r\nimport { Program, Provider, web3 } from \"@project-serum/anchor\";\r\n\r\n// SystemProgram is a reference to the Solana runtime!\r\nconst { SystemProgram, Keypair } = web3;\r\n\r\n// Create a keypair for the account that will hold the GIF data.\r\nconst arr = Object.values(kp._keypair.secretKey);\r\nconst secret = new Uint8Array(arr);\r\nconst baseAccount = web3.Keypair.fromSecretKey(secret);\r\n\r\n// Get our program's id form the IDL file.\r\nconst programID = new PublicKey(idl.metadata.address);\r\n\r\n// Set our network to devent.\r\nconst network = clusterApiUrl(\"devnet\");\r\n\r\n// Control's how we want to acknowledge when a trasnaction is \"done\".\r\nconst opts = {\r\n  preflightCommitment: \"processed\",\r\n};\r\n\r\n// Constants\r\nconst TWITTER_HANDLE = \"_buildspace\";\r\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\r\n\r\nconst TEST_GIFS = [\r\n  \"https://media.giphy.com/media/47GcWv6Msut9NnPR5V/giphy.gif\",\r\n  \"https://media.giphy.com/media/OPSqZ3BR1AfQte1QzO/giphy.gif\",\r\n  \"https://media.giphy.com/media/ltxfa7h5QuQrS/giphy.gif\",\r\n  \"https://media.giphy.com/media/bDkhBKTKNTzxu/giphy.gif\",\r\n];\r\n\r\nconst App = () => {\r\n  const [walletAddress, setWalletAddress] = useState(null);\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n  const [gifList, setGifList] = useState([]);\r\n\r\n  // functions\r\n\r\n  const connectWallet = async () => {\r\n    const { solana } = window;\r\n\r\n    if (solana) {\r\n      const response = await solana.connect();\r\n      console.log(\"Connected with Public Key:\", response.publicKey.toString());\r\n      setWalletAddress(response.publicKey.toString());\r\n    }\r\n  };\r\n\r\n  const onInputChange = (event) => {\r\n    const { value } = event.target;\r\n    setInputValue(value);\r\n  };\r\n  const sendGif = async () => {\r\n    if (inputValue.length === 0) {\r\n      console.log(\"No gif link given!\");\r\n      return;\r\n    }\r\n    console.log(\"Gif link:\", inputValue);\r\n    try {\r\n      const provider = getProvider();\r\n      const program = new Program(idl, programID, provider);\r\n\r\n      await program.rpc.addGif(inputValue, {\r\n        accounts: {\r\n          baseAccount: baseAccount.publicKey,\r\n        },\r\n      });\r\n      console.log(\"GIF sucesfully sent to program\", inputValue);\r\n      setInputValue(\"\");\r\n      await getGifList();\r\n    } catch (error) {\r\n      console.log(\"Error sending GIF:\", error);\r\n    }\r\n  };\r\n  const getProvider = () => {\r\n    const connection = new Connection(network, opts.preflightCommitment);\r\n    const provider = new Provider(\r\n      connection,\r\n      window.solana,\r\n      opts.preflightCommitment\r\n    );\r\n    return provider;\r\n  };\r\n\r\n  const createGifAccount = async () => {\r\n    try {\r\n      const provider = getProvider();\r\n      const program = new Program(idl, programID, provider);\r\n      console.log(\"ping\");\r\n      await program.rpc.startStuffOff({\r\n        accounts: {\r\n          baseAccount: baseAccount.publicKey,\r\n          user: provider.wallet.publicKey,\r\n          systemProgram: SystemProgram.programId,\r\n        },\r\n        signers: [baseAccount],\r\n      });\r\n      console.log(\r\n        \"Created a new BaseAccount w/ address:\",\r\n        baseAccount.publicKey.toString()\r\n      );\r\n      await getGifList();\r\n    } catch (error) {\r\n      console.log(\"Error creating BaseAccount account:\", error);\r\n    }\r\n  };\r\n\r\n  // functions\r\n  /*\r\n   * This function holds the logic for deciding if a Phantom Wallet is\r\n   * connected or not\r\n   */\r\n\r\n  const getGifList = async () => {\r\n    try {\r\n      const provider = getProvider();\r\n      const program = new Program(idl, programID, provider);\r\n      const account = await program.account.baseAccount.fetch(\r\n        baseAccount.publicKey\r\n      );\r\n\r\n      console.log(\"Got the account\", account);\r\n      setGifList(account.gifList);\r\n    } catch (error) {\r\n      console.log(\"Error in getGifs: \", error);\r\n      setGifList(null);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (walletAddress) {\r\n      console.log(\"Fetching GIF list...\");\r\n      getGifList();\r\n    }\r\n  }, [walletAddress]);\r\n\r\n  useEffect(() => {\r\n    if (walletAddress) {\r\n      console.log(\"Fetching GIF list...\");\r\n\r\n      // Call Solana Program\r\n\r\n      // Set state\r\n      getGifList();\r\n    }\r\n  }, [walletAddress]);\r\n\r\n  const checkIfWalletIsConnected = async () => {\r\n    try {\r\n      const { solana } = window;\r\n\r\n      if (solana) {\r\n        if (solana.isPhantom) {\r\n          console.log(\"Phantom wallet found!\");\r\n          const response = await solana.connect({ onlyIfTrusted: true });\r\n          console.log(\r\n            \"Connected with Public Key:\",\r\n            response.publicKey.toString()\r\n          );\r\n          setWalletAddress(response.publicKey.toString());\r\n        }\r\n      } else {\r\n        alert(\"Solana object not found! Get a Phantom Wallet ðŸ‘»\");\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  const renderNotConnectedContainer = () => (\r\n    <button\r\n      className=\"cta-button connect-wallet-button\"\r\n      onClick={connectWallet}\r\n    >\r\n      Connect to Wallet\r\n    </button>\r\n  );\r\n\r\n  const renderConnectedContainer = () => {\r\n    // If we hit this, it means the program account hasn't be initialized.\r\n    if (gifList === null) {\r\n      return (\r\n        <div className=\"connected-container\">\r\n          <button\r\n            className=\"cta-button submit-gif-button\"\r\n            onClick={createGifAccount}\r\n          >\r\n            Do One-Time Initialization For GIF Program Account\r\n          </button>\r\n        </div>\r\n      );\r\n    }\r\n    // Otherwise, we're good! Account exists. User can submit GIFs.\r\n    else {\r\n      return (\r\n        <div className=\"connected-container\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Enter gif link!\"\r\n            value={inputValue}\r\n            onChange={onInputChange}\r\n          />\r\n          <button className=\"cta-button submit-gif-button\" onClick={sendGif}>\r\n            Submit\r\n          </button>\r\n          <div className=\"gif-grid\">\r\n            {/* We use index as the key instead, also, the src is now item.gifLink */}\r\n            {gifList.map((item, index) => (\r\n              <div className=\"gif-item\" key={index}>\r\n                <img src={item.gifLink} />\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n  /** When our component first mounts, let's check to see if we have a connected\r\n   * Phantom Wallet\r\n   */\r\n  useEffect(() => {\r\n    window.addEventListener(\"load\", async (event) => {\r\n      await checkIfWalletIsConnected();\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (walletAddress) {\r\n      console.log(\"FEtching Gif list...\");\r\n      setGifList(TEST_GIFS);\r\n    }\r\n  }, [walletAddress]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className={walletAddress ? \"authed-container\" : \"container\"}>\r\n        <div className=\"header-container\">\r\n          <p className=\"header\">ðŸ–¼ GIF Portal</p>\r\n          <p className=\"sub-text\">\r\n            View your GIF collection in the metaverse âœ¨\r\n          </p>\r\n          {!walletAddress && renderNotConnectedContainer()}\r\n          {walletAddress && renderConnectedContainer()}\r\n        </div>\r\n        <div className=\"footer-container\">\r\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\r\n          <a\r\n            className=\"footer-text\"\r\n            href={TWITTER_LINK}\r\n            target=\"_blank\"\r\n            rel=\"noreferrer\"\r\n          >{`built on @${TWITTER_HANDLE}`}</a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}